# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import itertools
import pandas as pd
import numpy as np
import csv
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 258)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textNews = QtWidgets.QTextEdit(self.centralwidget)
        self.textNews.setGeometry(QtCore.QRect(260, 40, 531, 171))
        self.textNews.setObjectName("textNews")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(260, 20, 121, 16))
        self.label.setObjectName("label")
        self.textTitleNews = QtWidgets.QTextEdit(self.centralwidget)
        self.textTitleNews.setGeometry(QtCore.QRect(20, 40, 231, 101))
        self.textTitleNews.setObjectName("textTitleNews")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 101, 16))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 150, 101, 61))
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 150, 111, 51))
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuJ = QtWidgets.QMenu(self.menubar)
        self.menuJ.setObjectName("menuJ")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuJ.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fake news detector"))
        self.label.setText(_translate("MainWindow", "Введите текст новости"))
        self.label_2.setText(_translate("MainWindow", "Введите заголовок"))
        self.pushButton.setText(_translate("MainWindow", "Предсказать"))
        self.menuJ.setTitle(_translate("MainWindow", "О программе"))

    def add_functions(self):
        self.pushButton.clicked.connect(lambda: self.result(self.textTitleNews.toPlainText(), self.textNews.toPlainText()))

    def test(self):
        print(self.textTitleNews.toPlainText())
        print(self.textNews.toPlainText())

    def result(self, title, text):
        df = pd.read_csv('resourse\\news.csv')
        columns = ['title', 'text', 'label']
        data = [[title, text, '']]

        dff = pd.DataFrame(data, columns=columns)
        dff.to_csv('D:\\in.csv')
        dfin = pd.read_csv('D:\\in.csv')

        # Get the shape
        df.shape
        dfin.shape
        print("------")
        print("df.head")
        print(df.head(10))
        print("------")

        print("------")
        print("df_in.head")
        print(dfin)
        print("------")

        # DataFlair - Get the labels
        labels = df.label
        print(labels.head())

        # DataFlair - Split the dataset
        x_train, x_test, y_train, y_test = train_test_split(df['text'], labels, test_size=0.2, random_state=7)
        x_test_in = dfin['text']
        print("this is x_test_in")
        # df[text] - DataFrame
        # labels -
        # test_size -
        # random_state=Управляет перемешиванием, применяемым к данным перед применением разделения.)

        # DataFlair - Initialize a TfidfVectorizer
        tfidf_vectorizer = TfidfVectorizer(stop_words='english',
                                           max_df=0.7)  # Матрица фукнций (стоп-слово, 0.7 - автоматическое обнаружение стоп-слова)
        # DataFlair - Fit and transform train set, transform test set
        tfidf_train = tfidf_vectorizer.fit_transform(x_train)  # центрирование обучающего набора
        tfidf_test = tfidf_vectorizer.transform(x_test_in)  # перемешивание данных

        # DataFlair - Initialize a PassiveAggressiveClassifier
        pac = PassiveAggressiveClassifier(max_iter=50)
        pac.fit(tfidf_train, y_train)
        # DataFlair - Predict on the test set and calculate accuracy
        y_pred = pac.predict(tfidf_test)
        # прогнозирование


        print("полученные лейблы:")
        print(y_pred)
        result = list(y_pred)
        for i in range(len(result)):
           self.label_3.setText(result[i])
        #self.label_3.setText(result[i])


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
